{
  "activities": {
    "SM.1.A": {
      "description": "- You capture the risk appetite of your organization's executive leadership\n- The organization's leadership vet and approve the set of risks\n- You identify the main business and technical threats to your assets and data\n- You document risks and store them in an accessible location",
      "objective": "Identify organization drivers as they relate to the organization’s risk tolerance.",
      "proof": "Do you understand the enterprise-wide risk appetite for your applications?"
    },
    "SM.1.B": {
      "description": "- You document each metric, including a description of the sources, measurement coverage, and guidance on how to use it to explain application security trends\n- Metrics include measures of efforts, results, and the environment measurement categories\n- Most of the metrics are frequently measured, easy or inexpensive to gather, and expressed as a cardinal number or a percentage\n- Application security and development teams publish metrics",
      "objective": "Define metrics with insight into the effectiveness and efficiency of the Application Security Program.",
      "proof": "Do you use a set of metrics to measure the effectiveness and efficiency of the application security program across applications?"
    },
    "SM.2.A": {
      "description": "- The plan reflects the organization's business priorities and risk appetite\n- The plan includes measurable milestones and a budget\n- The plan is consistent with the organization's business drivers and risks\n- The plan lays out a roadmap for strategic and tactical initiatives\n- You have buy-in from stakeholders, including development teams",
      "objective": "Publish a unified strategy for application security.",
      "proof": "Do you have a strategic plan for application security and use it to make decisions?"
    },
    "SM.2.B": {
      "description": "- You defined KPIs after gathering enough information to establish realistic objectives\n- You developed KPIs with the buy-in from the leadership and teams responsible for application security\n- KPIs are available to the application teams and include acceptability thresholds and guidance in case teams need to take action\n- Success of the application security program is clearly visible based on defined KPIs",
      "objective": "Set targets and KPI’s for measuring the program effectiveness.",
      "proof": "Did you define Key Performance Indicators (KPI) from available application security metrics?"
    },
    "SM.3.A": {
      "description": "- You review and update the plan in response to significant changes in the business environment, the organization, or its risk appetite\n- Plan update steps include reviewing the plan with all the stakeholders and updating the business drivers and strategies\n- You adjust the plan and roadmap based on lessons learned from completed roadmap activities\n- You publish progress information on roadmap activities, making sure they are available to all stakeholders",
      "objective": "Align the application security program to support the organization’s growth.",
      "proof": "Do you regularly review and update the Strategic Plan for Application Security?"
    },
    "SM.3.B": {
      "description": "- You review KPIs at least yearly for their efficiency and effectiveness\n- KPIs and application security metrics trigger most of the changes to the application security strategy",
      "objective": "Influence the strategy based on the metrics and organizational needs.",
      "proof": "Do you update the Application Security strategy and roadmap based on application security metrics and KPIs?"
    },
    "PC.1.A": {
      "description": "- You have adapted existing standards appropriate for the organization’s industry to account for domain-specific considerations\n- Your standards are aligned with your policies and incorporate technology-specific implementation guidance",
      "objective": "Determine a security baseline representing organization’s policies and standards.",
      "proof": "Do you have and apply a common set of policies and standards throughout your organization?"
    },
    "PC.1.B": {
      "description": "- You have identified all sources of external compliance obligations\n- You have captured and reconciled compliance obligations from all sources",
      "objective": "Identify 3rd-party compliance drivers and requirements and map to existing policies and standards.",
      "proof": "Do you have a complete picture of your external compliance obligations?"
    },
    "PC.2.A": {
      "description": "- You create verification checklists and test scripts where applicable, aligned with the policy's requirements and the implementation guidance in the associated standards\n- You create versions adapted to each development methodology and technology the organization uses",
      "objective": "Develop security requirements applicable to all applications.",
      "proof": "Do you publish the organization's policies as test scripts or run-books for easy interpretation by development teams?"
    },
    "PC.2.B": {
      "description": "- You map each external compliance obligation to a well-defined set of application requirements\n- You define verification procedures, including automated tests, to verify compliance with compliance-related requirements",
      "objective": "Publish compliance-specific application requirements and test guidance.",
      "proof": "Do you have a standard set of security requirements and verification procedures addressing the organization's external compliance obligations?"
    },
    "PC.3.A": {
      "description": "- You have procedures (automated, if possible) to regularly generate compliance reports\n- You deliver compliance reports to all relevant stakeholders\n- Stakeholders use the reported compliance status information to identify areas for improvement",
      "objective": "Measure and report on the status of individual application’s adherence to policies and standards.",
      "proof": "Do you regularly report on policy and standard compliance, and use that information to guide compliance improvement efforts?"
    },
    "PC.3.B": {
      "description": "- You have established, well-defined compliance metrics\n- You measure and report on applications' compliance metrics regularly\n- Stakeholders use the reported compliance status information to identify compliance gaps and prioritize gap remediation efforts",
      "objective": "Measure and report on individual application’s compliance with 3rd party requirements.",
      "proof": "Do you regularly report on adherence to external compliance obligations and use that information to guide efforts to close compliance gaps?"
    },
    "EG.1.A": {
      "description": "- Training is repeatable, consistent, and available to anyone involved with software development lifecycle\n- Training includes the latest OWASP Top 10 if appropriate and includes concepts such as Least Privilege, Defense-in-Depth, Fail Secure (Safe), Complete Mediation, Session Management, Open Design, and Psychological Acceptability\n- Training requires a sign-off or an acknowledgement from attendees\n- You have updated the training in the last 12 months\n- Training is required during employees' onboarding process",
      "objective": "Provide security awareness training for all personnel involved in software development.",
      "proof": "Do you require employees involved with application development to take SDLC training?"
    },
    "EG.1.B": {
      "description": "- Security Champions receive appropriate training\n- Application Security and Development teams receive periodic briefings from Security Champions on the overall status of security initiatives and fixes\n- The Security Champion reviews the results of external testing before adding to the application backlog",
      "objective": "Identify a “Security Champion” within each development team.",
      "proof": "Have you identified a Security Champion for each development team?"
    },
    "EG.2.A": {
      "description": "- Training includes all topics from maturity level 1, and adds more specific tools, techniques, and demonstrations\n- Training is mandatory for all employees and contractors\n- Training includes input from in-house SMEs and trainees\n- Training includes demonstrations of tools and techniques developed in-house\n- You use feedback to enhance and make future training more relevant",
      "objective": "Offer technology and role-specific guidance, including security nuances of each language and platform.",
      "proof": "Is training customized for individual roles such as developers, testers, or security champions?"
    },
    "EG.2.B": {
      "description": "- The SSCE has a charter defining its role in the organization\n- Development teams review all significant architectural changes with the SSCE\n- The SSCE publishes SDLC standards and guidelines related to Application Security\n- Product Champions are responsible for promoting the use of specific security tools",
      "objective": "Develop a secure software center of excellence promoting thought leadership among developers and architects.",
      "proof": "Does the organization have a Secure Software Center of Excellence (SSCE)?"
    },
    "EG.3.A": {
      "description": "- A Learning Management System (LMS) is used to track trainings and certifications\n- Training is based on internal standards, policies, and procedures\n- You use certification programs or attendance records to determine access to development systems and resources",
      "objective": "Standardized in-house guidance around the organization’s secure software development standards.",
      "proof": "Have you implemented a Learning Management System or equivalent to track employee training and certification processes?"
    },
    "EG.3.B": {
      "description": "- The organization promotes use of a single portal across different teams and business units\n- The portal is used for timely information such as notification of security incidents, tool updates, architectural standard changes, and other related announcements\n- The portal is widely recognized by developers and architects as a centralized repository of the organization-specific application security information\n- All content is considered persistent and searchable\n- The portal provides access to application-specific security metrics",
      "objective": "Build a secure software community including all organization people involved in software security.",
      "proof": "Is there a centralized portal where developers and application security professionals from different teams and business units are able to communicate and share information?"
    },
    "TA.1.A": {
      "description": "- An agreed-upon risk classification exists\n- The application team understands the risk classification\n- The risk classification covers critical aspects of business risks the organization is facing\n- The organization has an inventory for the applications in scope",
      "objective": "A basic assessment of the application risk is performed to understand likelihood and impact of an attack.",
      "proof": "Do you classify applications according to business risk based on a simple and predefined set of questions?"
    },
    "TA.1.B": {
      "description": "- You perform threat modeling for high-risk applications\n- You use simple threat checklists, such as STRIDE\n- You persist the outcome of a threat model for later use",
      "objective": "Perform best-effort, risk-based threat modeling using brainstorming and existing diagrams with simple threat checklists.",
      "proof": "Do you identify and manage architectural design flaws with threat modeling?"
    },
    "TA.2.A": {
      "description": "- The application risk profile is in line with the organizational risk standard\n- The application risk profile covers impact to security and privacy\n- You validate the quality of the risk profile manually and/or automatically\n- The application risk profiles are stored in a central inventory",
      "objective": "Understand the risk for all applications in the organization by centralizing the risk profile inventory for stakeholders.",
      "proof": "Do you use centralized and quantified application risk profiles to evaluate business risk?"
    },
    "TA.2.B": {
      "description": "- You train your architects, security champions, and other stakeholders on how to do practical threat modeling\n- Your threat modeling methodology includes at least diagramming, threat identification, design flaw mitigations, and how to validate your threat model artifacts\n- Changes in the application or business context trigger a review of the relevant threat models\n- You capture the threat modeling artifacts with tools that are used by your application teams",
      "objective": "Standardize threat modeling training, processes, and tools to scale across the organization.",
      "proof": "Do you use a standard methodology, aligned on your application risk levels?"
    },
    "TA.3.A": {
      "description": "- The organizational risk standard considers historical feedback to improve the evaluation method\n- Significant changes in the application or business context trigger a review of the relevant risk profiles",
      "objective": "Periodically review application risk profiles at regular intervals to ensure accuracy and reflect current state.",
      "proof": "Do you regularly review and update the risk profiles for your applications?"
    },
    "TA.3.B": {
      "description": "- The threat model methodology considers historical feedback for improvement\n- You regularly (e.g., yearly) review the existing threat models to verify that no new threats are relevant for your applications\n- You automate parts of your threat modeling process with threat modeling tools",
      "objective": "Continuously optimization and automation of your threat modeling methodology.",
      "proof": "Do you regularly review and update the threat modeling methodology for your applications?"
    },
    "SR.1.A": {
      "description": "- Teams derive security requirements from functional requirements and customer or organization concerns\n- Security requirements are specific, measurable, and reasonable\n- Security requirements are in line with the organizational baseline",
      "objective": "High-level application security objectives are mapped to functional requirements.",
      "proof": "Do project teams specify security requirements during development?"
    },
    "SR.1.B": {
      "description": "- You consider including specific security requirements, activities, and processes when creating third-party agreements\n- A vendor questionnaire is available and used to assess the strengths and weaknesses of your suppliers",
      "objective": "Evaluate the supplier based on organizational security requirements.",
      "proof": "Do stakeholders review vendor collaborations for security requirements and methodology?"
    },
    "SR.2.A": {
      "description": "- Security requirements take into consideration domain specific knowledge when applying policies and guidance to product development\n- Domain experts are involved in the requirements definition process\n- You have an agreed upon structured notation for security requirements\n- Development teams have a security champion dedicated to reviewing security requirements and outcomes",
      "objective": "Structured security requirements are available and utilized by developer teams.",
      "proof": "Do you define, structure, and include prioritization in the artifacts of the security requirements gathering process?"
    },
    "SR.2.B": {
      "description": "- You discuss security requirements with the vendor when creating vendor agreements\n- Vendor agreements provide specific guidance on security defect remediation within an agreed upon timeframe\n- The organization has a templated agreement of responsibilities and service levels for key vendor security processes\n- You measure key performance indicators",
      "objective": "Build security into supplier agreements in order to ensure compliance with organizational requirements.",
      "proof": "Do vendors meet the security responsibilities and quality measures of service level agreements defined by the organization?"
    },
    "SR.3.A": {
      "description": "- A security requirements framework is available for project teams\n- The framework is categorized by common requirements and standards-based requirements\n- The framework gives clear guidance on the quality of requirements and how to describe them\n- The framework is adaptable to specific business requirements",
      "objective": "Build a requirements framework for product teams to utilize.",
      "proof": "Do you use a standard requirements framework to streamline the elicitation of security requirements?"
    },
    "SR.3.B": {
      "description": "- The vendor has a secure SDLC that includes secure build, secure deployment, defect management, and incident management that align with those used in your organization\n- You verify the solution meets quality and security objectives before every major release\n- When standard verification processes are not available, you use compensating controls such as software composition analysis and independent penetration testing",
      "objective": "Ensure proper security coverage for external suppliers by providing clear objectives.",
      "proof": "Are vendors aligned with standard security controls and software development tools and processes that the organization utilizes?"
    },
    "SA.1.A": {
      "description": "- You have an agreed upon checklist of security principles\n- You store your checklist in an accessible location\n- Relevant stakeholders understand security principles",
      "objective": "Teams are trained on the use of basic security principles during design.",
      "proof": "Do teams use security principles during design?"
    },
    "SA.1.B": {
      "description": "- You have a list of the most important technologies used in, or in support of, each application\n- You identify and track technological risks\n- You ensure the risks to these technologies are in line with the organizational baseline",
      "objective": "Elicit technologies, frameworks and integrations within the overall solution to identify risk.",
      "proof": "Do you evaluate the security quality of important technologies used for development?"
    },
    "SA.2.A": {
      "description": "- You have a documented list of reusable security services, available to relevant stakeholders\n- You have reviewed the baseline security posture for each selected service\n- Your designers are trained to integrate each selected service following available guidance",
      "objective": "Establish common design patterns and security solutions for adoption.",
      "proof": "Do you use shared security services during design?"
    },
    "SA.2.B": {
      "description": "- The list is based on technologies used in the software portfolio\n- Lead architects and developers review and approve the list\n- You share the list across the organization\n- You review and update the list at least yearly",
      "objective": "Standardize technologies and frameworks to be used throughout the different applications.",
      "proof": "Do you have a list of recommended technologies for the organization?"
    },
    "SA.3.A": {
      "description": "- You have one or more approved reference architectures documented and available to stakeholders\n- You improve the reference architectures continuously based on insights and best practices\n- You provide a set of components, libraries, and tools to implement each reference architecture",
      "objective": "Reference architectures are utilized and continuously evaluated for adoption and appropriateness.",
      "proof": "Do you base your design on available reference architectures?"
    },
    "SA.3.B": {
      "description": "- You monitor applications regularly for the correct use of the recommended technologies\n- You solve violations against the list accoranding to organizational policies\n- You take action if the number of violations falls outside the yearly objectives",
      "objective": "Impose the use of standard technologies on all software development.",
      "proof": "Do you enforce the use of recommended technologies within the organization?"
    },
    "SB.1.A": {
      "description": "- You have enough information to recreate the build processes\n- Your build documentation up to date\n- Your build documentation is stored in an accessible location\n- Produced artifact checksums are created during build to support later verification\n- You harden the tools that are used within the build process",
      "objective": "Create a formal definition of the build process so that it becomes consistent and repeatable.",
      "proof": "Is your full build process formally described?"
    },
    "SB.1.B": {
      "description": "- You have a current bill of materials (BOM) for every application\n- You can quickly find out which applications are affected by a particular CVE\n- You have analyzed, addressed, and documented findings from dependencies at least once in the last three months",
      "objective": "Create records with Bill of Materials of your applications and opportunistically analyze these.",
      "proof": "Do you have solid knowledge about dependencies you're relying on?"
    },
    "SB.2.A": {
      "description": "- The build process itself doesn't require any human interaction\n- Your build tools are hardened as per best practice and vendor guidance\n- You encrypt the secrets required by the build tools and control access based on the principle of least privilege",
      "objective": "Automate your build pipeline and secure the used tooling. Add security checks in the build pipeline.",
      "proof": "Is the build process fully automated?"
    },
    "SB.2.B": {
      "description": "- You keep a list of approved dependencies that meet predefined criteria\n- You automatically evaluate dependencies for new CVEs and alert responsible staff\n- You automatically detect and alert to license changes with possible impact on legal application usage\n- You track and alert to usage of unmaintained dependencies\n- You reliably detect and remove unnecessary dependencies from the software",
      "objective": "Evaluate used dependencies and ensure timely reaction to situations posing risk to your applications.",
      "proof": "Do you handle 3rd party dependency risk by a formal process?"
    },
    "SB.3.A": {
      "description": "- Builds fail if the application doesn't meet a predefined security baseline\n- You have a maximum accepted severity for vulnerabilities\n- You log warnings and failures in a centralized system\n- You select and configure tools to evaluate each application against its security requirements at least once a year",
      "objective": "Define mandatory security checks in the build process and ensure that building non-compliant artifacts fails.",
      "proof": "Do you enforce automated security checks in your build processes?"
    },
    "SB.3.B": {
      "description": "- Your build system is connected to a system for tracking 3rd party dependency risk, causing build to fail unless the vulnerability is evaluated to be a false positive or the risk is explicitly accepted\n- You scan your dependencies using a static analysis tool\n- You report findings back to dependency authors using an established responsible disclosure process\n- Using a new dependency not evaluated for security risks causes the build to fail",
      "objective": "Analyze used dependencies for security issues in a comparable way to your own code.",
      "proof": "Do you prevent build of software if it's affected by vulnerabilities in dependencies?"
    },
    "SD.1.A": {
      "description": "- You have enough information to run the deployment processes\n- Your deployment documentation up to date\n- Your deployment documentation is accessible to relevant stakeholders\n- You ensure that only defined qualified personnel can trigger a deployment\n- You harden the tools that are used within the deployment process",
      "objective": "Formalize the deployment process and secure the used tooling and processes.",
      "proof": "Do you use repeatable deployment processes?"
    },
    "SD.1.B": {
      "description": "- You store production secrets protected in a secured location\n- Developers do not have access to production secrets\n- Production secrets are not available in non-production environments",
      "objective": "Introduce basic protection measures to limit access to your production secrets.",
      "proof": "Do you limit access to application secrets according to the least privilege principle?"
    },
    "SD.2.A": {
      "description": "- Deployment processes are automated on all stages\n- Deployment includes automated security testing procedures\n- You alert responsible staff to identified vulnerabilities\n- You have logs available for your past deployments for a defined period of time",
      "objective": "Automate the deployment process over all stages and introduce sensible security verification tests.",
      "proof": "Are deployment processes automated and employing security checks?"
    },
    "SD.2.B": {
      "description": "- Source code files no longer contain active application secrets\n- Under normal circumstances, no humans access secrets during deployment procedures\n- You log and alert when abnormal secrets access is attempted",
      "objective": "Inject secrets dynamically during deployment process from hardened storages and audit all human access to them.",
      "proof": "Do you inject production secrets into configuration files during deployment?"
    },
    "SD.3.A": {
      "description": "- You prevent or roll back deployment if you detect an integrity breach\n- The verification is done against signatures created during the build time\n- If checking of signatures is not possible (e.g. externally build software), you introduce compensating measures",
      "objective": "Automatically verify integrity of all deployed software, independently on whether it's internally or externally developed.",
      "proof": "Do you consistently validate the integrity of deployed artifacts?"
    },
    "SD.3.B": {
      "description": "- You generate and synchronize secrets using a vetted solution\n- Secrets are different between different application instances\n- Secrets are regularly updated",
      "objective": "Improve the lifecycle of application secrets by regularly generating them and by ensuring proper use.",
      "proof": "Do you practice proper lifecycle management for application secrets?"
    },
    "DM.1.A": {
      "description": "- You can easily get an overview of all security defects impacting one application\n- You have at least a rudimentary classification scheme in place\n- The process includes a strategy for handling false positives and duplicate entries\n- The defect management system covers defects from various sources and activities",
      "objective": "Introduce a structured tracking of security defects and make knowledgeable decisions based on this information.",
      "proof": "Do you track all known security defects in accessible locations?"
    },
    "DM.1.B": {
      "description": "- You analyzed your recorded metrics at least once in the last year\n- At least basic information about this initiative is recorded and available\n- You have identified and carried out at least one quick win activity based on the data",
      "objective": "Regularly go over previously recorded security defects and derive quick wins from basic metrics.",
      "proof": "Do you use basic metrics about recorded security defects to carry out quick win improvement activities?"
    },
    "DM.2.A": {
      "description": "- A single severity scheme is applied to all defects across the organization\n- The scheme includes SLAs for fixing particular severity classes\n- You regularly report compliance to SLAs",
      "objective": "Rate all security defects over the whole organization consistently and define SLAs for particular severity classes.",
      "proof": "Do you keep an overview of the state of security defects across the organization?"
    },
    "DM.2.B": {
      "description": "- You document metrics for defect classification and categorization and keep them up to date\n- Executive management regularly receives information about defects and has acted upon it in the last year\n- You regularly share technical details about security defects among teams",
      "objective": "Collect standardized defect management metrics and use these also for prioritization of centrally driven initiatives.",
      "proof": "Do you improve your security assurance program upon standardized metrics?"
    },
    "DM.3.A": {
      "description": "- You automatically alert of SLA breaches and transfer respective defects to the risk management process\n- You integrate relevant tooling (e.g. monitoring, build, deployment) with the defect management system",
      "objective": "Enforce the predefined SLAs and integrate your defect management system with other relevant tooling.",
      "proof": "Do you enforce SLAs for fixing security defects?"
    },
    "DM.3.B": {
      "description": "- You have analyzed the effectiveness of the security metrics at least once in the last year\n- Where possible, you verify the correctness of the data automatically\n- The metrics is aggregated with other sources like threat intelligence or incident management\n- You derived at least one strategic activity from the metrics in the last year",
      "objective": "Continuously improve your security defect management metrics and correlate it with other sources.",
      "proof": "Do you regularly evaluate the effectiveness of your security metrics so that its input helps drive your security strategy?"
    },
    "AA.1.A": {
      "description": "- You have an agreed upon model of the overall software architecture\n- You include components, interfaces, and integrations in the architecture model\n- You verify the correct provision of general security mechanisms\n- You log missing security controls as defects",
      "objective": "Identify application and infrastructure architecture components and review for basic security provisioning.",
      "proof": "Do you review the application architecture for key security objectives on an ad-hoc basis?"
    },
    "AA.1.B": {
      "description": "- You have an agreed upon model of the overall software architecture\n- Security savvy staff conduct the review\n- You consider different types of threats, including insider and data-related ones",
      "objective": "Ad-hoc review of the architecture for unmitigated security threats.",
      "proof": "Do you review the application architecture for mitigations of typical threats on an ad-hoc basis?"
    },
    "AA.2.A": {
      "description": "- You review compliance with internal and external requirements\n- You systematically review each interface in the system\n- You use a formalized review method and structured validation\n- You log missing security mechanisms as defects",
      "objective": "Validate the architecture security mechanisms.",
      "proof": "Do you regularly review the security mechanisms of your architecture?"
    },
    "AA.2.B": {
      "description": "- You systematically review each threat identified in the Threat Assessment\n- Trained or experienced people lead review exercise\n- You identify mitigating design-level features for each identified threat\n- You log unhandled threats as defects",
      "objective": "Analyze the architecture for known threats.",
      "proof": "Do you regularly evaluate the threats to your architecture?"
    },
    "AA.3.A": {
      "description": "- You evaluate the preventive, detective, and response capabilities of security controls\n- You evaluate the strategy alignment, appropriate support, and scalability of security controls\n- You evaluate the effectiveness at least yearly\n- You log identified shortcomings as defects",
      "objective": "Review of the architecture components' effectiveness.",
      "proof": "Do you regularly review the effectiveness of the security controls?"
    },
    "AA.3.B": {
      "description": "- You assess your architectures in a standardized, documented manner\n- You use recurring findings to trigger a review of reference architectures\n- You independently review the quality of the architecture assessments on an ad-hoc basis\n- You use reference architecture updates to trigger reviews of relevant shared solutions, in a risk-based manner",
      "objective": "Feed the architecture review results back into the enterprise architecture, organization design principles & patterns, security solutions and reference architectures.",
      "proof": "Do you regularly update your reference architectures based on architecture assessment findings?"
    },
    "RT.1.A": {
      "description": "- Security testing at least verifies the implementation of authentication, access control, input validation, encoding and escaping data, and encryption controls\n- Security testing executes whenever the application changes its use of the controls",
      "objective": "Test for software security controls.",
      "proof": "Do you test applications for the correct functioning of standard security controls?"
    },
    "RT.1.B": {
      "description": "- Testing covers most or all of the application's main input parameters\n- You record and inspect all application crashes for security impact on a best-effort basis",
      "objective": "Perform security fuzzing testing.",
      "proof": "Do you test applications using randomization or fuzzing techniques?"
    },
    "RT.2.A": {
      "description": "- You tailor tests to each application and assert expected security functionality\n- You capture test results as a pass or fail condition\n- Tests use a standardized framework or DSL",
      "objective": "Derive test cases from known security requirements.",
      "proof": "Do you consistently write and execute test scripts to verify the functionality of security requirements?"
    },
    "RT.2.B": {
      "description": "- Important business functionality has corresponding abuse cases\n- You build abuse stories around relevant personas with well-defined motivations and characteristics\n- You capture identified weaknesses as security requirements",
      "objective": "Create and test abuse cases and business logic flaw test.",
      "proof": "Do you create abuse cases from functional requirements and use them to drive security tests?"
    },
    "RT.3.A": {
      "description": "- You consistently write tests for all identified bugs (possibly exceeding a pre-defined severity threshold)\n- You collect security tests in a test suite that is part of the existing unit testing framework",
      "objective": "Perform regression testing (with security unit tests).",
      "proof": "Do you automatically test applications for security regressions?"
    },
    "RT.3.B": {
      "description": "- Stress tests target specific application resources (e.g. memory exhaustion by saving large amounts of data to a user session)\n- You design tests around relevant personas with well-defined capabilities (knowledge, resources)\n- You feed the results back to the Design practices",
      "objective": "Denial of service and security stress testing.",
      "proof": "Do you perform denial of service and security stress testing?"
    },
    "ST.1.A": {
      "description": "- You dynamically generate inputs for security tests using automated tools\n- You choose the security testing tools to fit the organization's architecture and technology stack, and balance depth and accuracy of inspection with usability of findings to the organization",
      "objective": "Utilize automated security testing tools.",
      "proof": "Do you scan applications with automated security testing tools?"
    },
    "ST.1.B": {
      "description": "- Criteria exist to help the reviewer focus on high-risk components\n- Qualified personnel conduct reviews following documented guidelines\n- You address findings in accordance with the organization's defect management policy",
      "objective": "Perform manual security testing of high-risk components.",
      "proof": "Do you manually review the security quality of selected high-risk components?"
    },
    "ST.2.A": {
      "description": "- You tune and select tool features which match your application or technology stack\n- You minimize false positives by silencing or automatically filter irrelevant warnings or low probability findings\n- You minimize false negatives by leverage tool extensions or DSLs to customize tools for your application or organizational standards",
      "objective": "Employ application-specific security testing automation.",
      "proof": "Do you customize the automated security tools to your applications and technology stacks?"
    },
    "ST.2.B": {
      "description": "- Penetration testing uses application-specific security test cases to evaluate security\n- Penetration testing looks for both technical and logical issues in the application\n- Stakeholders review the test results and handle them in accordance with the organization's risk management\n- Qualified personnnel performs penetration testing",
      "objective": "Conduct manual penetration testing.",
      "proof": "Do you perform penetration testing for your applications at regular intervals?"
    },
    "ST.3.A": {
      "description": "- Management and business stakeholders track and review test results throughout the development cycle\n- You merge test results into a central dashboard and feed them into defect management",
      "objective": "Integrate automated security testing into the build and deploy process.",
      "proof": "Do you integrate automated security testing into the build and deploy process?"
    },
    "ST.3.B": {
      "description": "- You use results from other security activities to improve integrated security testing during development\n- You review test results and incorporate them into security awareness training and security testing playbooks\n- Stakeholders review the test results and handle them in accordance with the organization's risk management",
      "objective": "Integrate security testing into development process.",
      "proof": "Do you use the results of security testing to improve the development lifecycle?"
    },
    "IM.1.A": {
      "description": "- You have a contact point for the creation of security incidents\n- You analyze data in accordance with the log data retention periods\n- The frequency of this analysis is aligned with the criticality of your applications",
      "objective": "Use available log data to perform best-effort detection of possible security incidents.",
      "proof": "Do you analyze log data for security incidents periodically?"
    },
    "IM.1.B": {
      "description": "- You have a defined person or role for incident handling\n- You document security incidents",
      "objective": "Identify roles and responsibilities for incident response.",
      "proof": "Do you respond to detected incidents?"
    },
    "IM.2.A": {
      "description": "- The process has a dedicated owner\n- You store process documentation in an accessible location\n- The process considers an escalation path for further analysis\n- You train employees responsible for incident detection in this process\n- You have a checklist of potential attacks to simplify incident detection",
      "objective": "Follow an established, well-documented process for incident detection, with emphasis on automated log evaluation.",
      "proof": "Do you follow a documented process for incident detection?"
    },
    "IM.2.B": {
      "description": "- You have an agreed upon incident classification\n- The process considers Root Case Analysis for high severity incidents\n- Employees responsible for incident response are trained in this process\n- Forensic analysis tooling is available",
      "objective": "Establish a formal incident response process and ensure staff are properly trained in performing their roles.",
      "proof": "Do you use a repeatable process for incident handling?"
    },
    "IM.3.A": {
      "description": "- You perform reviews at least annually\n- You update the checklist of potential attacks with external and internal data",
      "objective": "Use a proactively managed process for detection of incidents.",
      "proof": "Do you review and update the incident detection process regularly?"
    },
    "IM.3.B": {
      "description": "- The team performs Root Cause Analysis for all security incidents unless there is a specific reason not to do so\n- You review and update the response process at least annually",
      "objective": "Employ a dedicated, well-trained incident response team.",
      "proof": "Do you have a dedicated incident response team available?"
    },
    "EM.1.A": {
      "description": "- You have identified the key components in each technology stack used\n- You have an established configuration standard for each key component",
      "objective": "Perform best-effort hardening of configurations, based on readily available information.",
      "proof": "Do you harden configurations for key components of your technology stacks?"
    },
    "EM.1.B": {
      "description": "- You have an up-to-date list of components, including version information\n- You regularly review public sources for vulnerabilities related to your components",
      "objective": "Perform best-effort patching of system and application components.",
      "proof": "Do you identify and patch vulnerable components?"
    },
    "EM.2.A": {
      "description": "- You have assigned an owner for each baseline\n- The owner keeps their assigned baselines up to date\n- You store baselines in an accessible location\n- You train employees responsible for configurations in these baselines",
      "objective": "Perform consistent hardening of configurations, following established baselines and guidance.",
      "proof": "Do you have hardening baselines for your components?"
    },
    "EM.2.B": {
      "description": "- The process includes vendor information for third-party patches\n- The process considers external sources to gather information about zero day attacks, and includes appropriate risk mitigation steps\n- The process includes guidance for prioritizing component updates",
      "objective": "Perform regular patching of system and application components, across the full stack. Ensure timely delivery of patches to customers.",
      "proof": "Do you follow an established process for updating components of your technology stacks?"
    },
    "EM.3.A": {
      "description": "- You perform conformity checks regularly, preferably using automation\n- You store conformity check results in an accessible location\n- You follow an established process to address reported non-conformities\n- You review each baseline at least annually, and update it when required",
      "objective": "Actively monitor configurations for non-conformance to baselines, and handle detected occurrences as security defects.",
      "proof": "Do you monitor and enforce conformity with hardening baselines?"
    },
    "EM.3.B": {
      "description": "- You update the list with components and versions\n- You identify and update missing updates according to existing SLA\n- You review and update the process based on feedback from the people who perform patching",
      "objective": "Actively monitor update status and manage missing patches as security defects. Proactively obtain vulnerability and update information for components.",
      "proof": "Do you regularly evaluate components and review patch level status?"
    },
    "OM.1.A": {
      "description": "- You know the data elements processed and stored by each application\n- You know the type and sensitivity level of each identified data element\n- You have controls to prevent propagation of unsanitized sensitive data from production to lower environments",
      "objective": "Implement basic data protection practices.",
      "proof": "Do you protect and handle information according to protection requirements for data stored and processed on each application?"
    },
    "OM.1.B": {
      "description": "- You do not use unsupported applications or dependencies\n- You manage customer/user migration from older versions for each product and customer/user group",
      "objective": "Decommission unused applications and services as identified. Manage customer upgrades/migrations individually.",
      "proof": "Do you identify and remove systems, applications, application dependencies, or services that are no longer used, have reached end of life, or are no longer actively developed or supported?"
    },
    "OM.2.A": {
      "description": "- The data catalog is stored in an accessible location\n- You know which data elements are subject to specific regulation\n- You have controls for protecting and preserving data throughout its lifetime\n- You have retention requirements for data, and you destroy backups in a timely manner after the relevant retention period ends",
      "objective": "Develop data catalog and establish data protection policy.",
      "proof": "Do you maintain a data catalog, including types, sensitivity levels, and processing and storage locations?"
    },
    "OM.2.B": {
      "description": "- You document the status of support for all released versions of your products, in an accessible location\n- The process includes replacement or upgrade of third-party applications, or application dependencies, that have reached end of life\n- Operating environments do not contain orphaned accounts, firewall rules, or other configuration artifacts",
      "objective": "Develop repeatable decommissioning processes for unused systems/services, and for migration from legacy dependencies. Manage legacy migration roadmaps for customers.",
      "proof": "Do you follow an established process for removing all associated resources, as part of decommissioning of unused systems, applications, application dependencies, or services?"
    },
    "OM.3.A": {
      "description": "- You have automated monitoring to detect attempted or actual violations of the Data Protection Policy\n- You have tools for data loss prevention, access control and tracking, or anomalous behavior detection\n- You periodically audit the operation of automated mechanisms, including backups and record deletions",
      "objective": "Automate detection of policy non-compliance, and audit compliance periodically. Regularly review and update to data catalog and data protection policy.",
      "proof": "Do you regularly review and update the data catalog and your data protection policies and procedures?"
    },
    "OM.3.B": {
      "description": "- Your end of life management process is agreed upon\n- You inform customers and user groups of product timelines to prevent disruption of service or support\n- You review the process at least annually",
      "objective": "Proactively manage migration roadmaps, for both unsupported end-of-life dependencies, and legacy versions of delivered software.",
      "proof": "Do you regularly evaluate the lifecycle state and support status of every software asset and underlying infrastructure component, and estimate their end of life?"
    }
  }
}
